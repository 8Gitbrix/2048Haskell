
==================== FINAL INTERFACE ====================
2017-12-05 06:46:32.545636 UTC

interface main@main:Logic 8002
  interface hash: 19db47424e82d05938a8979b0bdd8390
  ABI hash: 545c175fafda510b0a91387b10806c1d
  export-list hash: d7fcd43ac92c4a99ecfbfe9a24033644
  orphan hash: 5c6afa542ca157feb54eeb37258af508
  flag hash: db8b3dba68660d93bea9bec96c028028
  sig of: Nothing
  used TH splices: False
  where
exports:
  Logic.checkFull
  Logic.initGame
  Logic.insertRandomTile
  Logic.leftGrid
  Logic.mainLogic
  Logic.printTile
  Logic.scoreGrid
  Logic.stuckCheck
  Logic.Direction{Logic.Down Logic.Left Logic.Right Logic.Up}
  Logic.Game{Logic.Game _done _grid _score}
  Logic.Grid
module dependencies:
package dependencies: StateVar-1.1.0.4@StateVar-1.1.0.4-5dJbnTVECtEAhfJXPZKdbO
                      adjunctions-4.3@adjunctions-4.3-A5jfd1yrmaY4DRMJuiquBp
                      array-0.5.1.1@array-0.5.1.1 base-4.9.1.0
                      base-orphans-0.6@base-orphans-0.6-AbJ3lKVXygDCG0eeQEv8Iu
                      bifunctors-5.4.2@bifunctors-5.4.2-KcF2f75KyQm5BjgJ8WkHCw
                      binary-0.8.3.0@binary-0.8.3.0
                      bytes-0.15.3@bytes-0.15.3-JnJk9rvpCHsKPq5vbMmKHS
                      bytestring-0.10.8.1@bytestring-0.10.8.1
                      call-stack-0.1.0@call-stack-0.1.0-FYVrCPXGP9EGAuTW32963O
                      cereal-0.5.4.0@cereal-0.5.4.0-BsAGxfp8yAs3CiRo2E875e
                      comonad-5.0.2@comonad-5.0.2-Fq9Xy9jdx6uIyJZn00E6Yc
                      containers-0.5.7.1@containers-0.5.7.1
                      contravariant-1.4@contravariant-1.4-29zF0Im431177ovfbHYCGv
                      deepseq-1.4.2.0@deepseq-1.4.2.0
                      distributive-0.5.3@distributive-0.5.3-IX4kyVcHAyoH4uFYrsjY1R
                      exceptions-0.8.3@exceptions-0.8.3-ADEDRATtUrMK1JW4zMQ9U
                      free-4.12.4@free-4.12.4-C2gBQV0m8J42HxqSLTFyVx
                      ghc-boot-th-8.0.2@ghc-boot-th-8.0.2 ghc-prim-0.5.0.0
                      hashable-1.2.6.1@hashable-1.2.6.1-2ZLNuHq395GGIHwEHuqZol
                      integer-gmp-1.0.0.1
                      integer-logarithms-1.0.2@integer-logarithms-1.0.2-92lMiWV9mmYAwfMEYgfQ0D
                      kan-extensions-5.0.2@kan-extensions-5.0.2-8LTJJ1zQJWB7SfewWXUuqX
                      lens-4.15.4@lens-4.15.4-Km66e7WFRbEC7HnDdV2JDW
                      linear-1.20.7@linear-1.20.7-Hm7B9kQS5iJ4TZVBdSCC2p
                      mtl-2.2.1@mtl-2.2.1-BLKBelFsPB3BoFeSWSOYj6
                      prelude-extras-0.4.0.3@prelude-extras-0.4.0.3-BhL9U5k7NtGJn1itwIHt2Y
                      pretty-1.1.3.3@pretty-1.1.3.3
                      primitive-0.6.2.0@primitive-0.6.2.0-4578caNkWQ54Gt1mxLF2Yh
                      profunctors-5.2.1@profunctors-5.2.1-Ga89Nyw0d7LBEIoX4AZ6gT
                      random-1.1@random-1.1-9tceXaeYIMZ4JrKq20Egog
                      reflection-2.1.2@reflection-2.1.2-Bem12O1xFGSHr4C2Hyu1c4
                      scientific-0.3.5.2@scientific-0.3.5.2-FM2NdrNTcdbCDq9wuNnhIA
                      semigroupoids-5.2.1@semigroupoids-5.2.1-Db8txM8kTsI6Y49CY6g5Jn
                      stm-2.4.4.1@stm-2.4.4.1-JQn4hNPyYjP5m9AcbI88Ve
                      tagged-0.8.5@tagged-0.8.5-1mTloBSoUxv8dqUr8XBGBt
                      template-haskell-2.11.1.0
                      text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00
                      th-abstraction-0.2.6.0@th-abstraction-0.2.6.0-HRFJgpoqs5HJ5LgHnjmMhQ
                      time-1.6.0.1@time-1.6.0.1 transformers-0.5.2.0@transformers-0.5.2.0
                      transformers-compat-0.5.1.4@transformers-compat-0.5.1.4-IuFogs8HAVUJBWVNMhtssu
                      unordered-containers-0.2.8.0@unordered-containers-0.2.8.0-Bp9XgxjuHxcI4tFehVMDGC
                      vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ
orphans: base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
         base-orphans-0.6@base-orphans-0.6-AbJ3lKVXygDCG0eeQEv8Iu:Data.Orphans
         binary-0.8.3.0@binary-0.8.3.0:Data.Binary.Generic
         bytestring-0.10.8.1@bytestring-0.10.8.1:Data.ByteString.Builder
         hashable-1.2.6.1@hashable-1.2.6.1-2ZLNuHq395GGIHwEHuqZol:Data.Hashable.Generic
         linear-1.20.7@linear-1.20.7-Hm7B9kQS5iJ4TZVBdSCC2p:Linear.Instances
         reflection-2.1.2@reflection-2.1.2-Bem12O1xFGSHr4C2Hyu1c4:Data.Reflection
         stm-2.4.4.1@stm-2.4.4.1-JQn4hNPyYjP5m9AcbI88Ve:Control.Monad.STM
         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text
         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text.Lazy
         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text.Show
         time-1.6.0.1@time-1.6.0.1:Data.Time.Calendar.Gregorian
         time-1.6.0.1@time-1.6.0.1:Data.Time.Format.Parse
         time-1.6.0.1@time-1.6.0.1:Data.Time.LocalTime.LocalTime
         transformers-0.5.2.0@transformers-0.5.2.0:Control.Monad.Trans.Error
         vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector.Fusion.Bundle
         vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector.Unboxed
family instance modules: adjunctions-4.3@adjunctions-4.3-A5jfd1yrmaY4DRMJuiquBp:Data.Functor.Rep
                         base-4.9.1.0:Control.Applicative base-4.9.1.0:Data.Complex
                         base-4.9.1.0:Data.Either base-4.9.1.0:Data.Functor.Compose
                         base-4.9.1.0:Data.Functor.Const base-4.9.1.0:Data.Functor.Identity
                         base-4.9.1.0:Data.Functor.Product base-4.9.1.0:Data.Functor.Sum
                         base-4.9.1.0:Data.List.NonEmpty base-4.9.1.0:Data.Monoid
                         base-4.9.1.0:Data.Semigroup base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:Data.Version base-4.9.1.0:Data.Void
                         base-4.9.1.0:GHC.Exts base-4.9.1.0:GHC.Generics
                         base-4.9.1.0:GHC.IO.Exception base-4.9.1.0:GHC.TypeLits
                         bifunctors-5.4.2@bifunctors-5.4.2-KcF2f75KyQm5BjgJ8WkHCw:Data.Bifunctor.Biff
                         bifunctors-5.4.2@bifunctors-5.4.2-KcF2f75KyQm5BjgJ8WkHCw:Data.Bifunctor.Clown
                         bifunctors-5.4.2@bifunctors-5.4.2-KcF2f75KyQm5BjgJ8WkHCw:Data.Bifunctor.Fix
                         bifunctors-5.4.2@bifunctors-5.4.2-KcF2f75KyQm5BjgJ8WkHCw:Data.Bifunctor.Flip
                         bifunctors-5.4.2@bifunctors-5.4.2-KcF2f75KyQm5BjgJ8WkHCw:Data.Bifunctor.Join
                         bifunctors-5.4.2@bifunctors-5.4.2-KcF2f75KyQm5BjgJ8WkHCw:Data.Bifunctor.Joker
                         bifunctors-5.4.2@bifunctors-5.4.2-KcF2f75KyQm5BjgJ8WkHCw:Data.Bifunctor.Product
                         bifunctors-5.4.2@bifunctors-5.4.2-KcF2f75KyQm5BjgJ8WkHCw:Data.Bifunctor.Sum
                         bifunctors-5.4.2@bifunctors-5.4.2-KcF2f75KyQm5BjgJ8WkHCw:Data.Bifunctor.Tannen
                         bifunctors-5.4.2@bifunctors-5.4.2-KcF2f75KyQm5BjgJ8WkHCw:Data.Bifunctor.Wrapped
                         bytes-0.15.3@bytes-0.15.3-JnJk9rvpCHsKPq5vbMmKHS:Data.Bytes.Get
                         bytes-0.15.3@bytes-0.15.3-JnJk9rvpCHsKPq5vbMmKHS:Data.Bytes.Signed
                         bytes-0.15.3@bytes-0.15.3-JnJk9rvpCHsKPq5vbMmKHS:Data.Bytes.VarInt
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntMap.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntSet.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Sequence
                         containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base
                         ghc-boot-th-8.0.2@ghc-boot-th-8.0.2:GHC.LanguageExtensions.Type
                         kan-extensions-5.0.2@kan-extensions-5.0.2-8LTJJ1zQJWB7SfewWXUuqX:Data.Functor.Day
                         kan-extensions-5.0.2@kan-extensions-5.0.2-8LTJJ1zQJWB7SfewWXUuqX:Data.Functor.Yoneda
                         lens-4.15.4@lens-4.15.4-Km66e7WFRbEC7HnDdV2JDW:Control.Lens.At
                         lens-4.15.4@lens-4.15.4-Km66e7WFRbEC7HnDdV2JDW:Control.Lens.Internal.Indexed
                         lens-4.15.4@lens-4.15.4-Km66e7WFRbEC7HnDdV2JDW:Control.Lens.Reified
                         lens-4.15.4@lens-4.15.4-Km66e7WFRbEC7HnDdV2JDW:Control.Lens.Tuple
                         lens-4.15.4@lens-4.15.4-Km66e7WFRbEC7HnDdV2JDW:Control.Lens.Wrapped
                         lens-4.15.4@lens-4.15.4-Km66e7WFRbEC7HnDdV2JDW:Control.Lens.Zoom
                         linear-1.20.7@linear-1.20.7-Hm7B9kQS5iJ4TZVBdSCC2p:Linear.V
                         linear-1.20.7@linear-1.20.7-Hm7B9kQS5iJ4TZVBdSCC2p:Linear.V1
                         linear-1.20.7@linear-1.20.7-Hm7B9kQS5iJ4TZVBdSCC2p:Linear.V2
                         pretty-1.1.3.3@pretty-1.1.3.3:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.3@pretty-1.1.3.3:Text.PrettyPrint.HughesPJ
                         primitive-0.6.2.0@primitive-0.6.2.0-4578caNkWQ54Gt1mxLF2Yh:Control.Monad.Primitive
                         primitive-0.6.2.0@primitive-0.6.2.0-4578caNkWQ54Gt1mxLF2Yh:Data.Primitive.Array
                         profunctors-5.2.1@profunctors-5.2.1-Ga89Nyw0d7LBEIoX4AZ6gT:Data.Profunctor.Rep
                         tagged-0.8.5@tagged-0.8.5-1mTloBSoUxv8dqUr8XBGBt:Data.Tagged
                         template-haskell-2.11.1.0:Language.Haskell.TH.Syntax
                         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text
                         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text.Lazy
                         th-abstraction-0.2.6.0@th-abstraction-0.2.6.0-HRFJgpoqs5HJ5LgHnjmMhQ:Language.Haskell.TH.Datatype
                         unordered-containers-0.2.8.0@unordered-containers-0.2.8.0-Bp9XgxjuHxcI4tFehVMDGC:Data.HashMap.Base
                         unordered-containers-0.2.8.0@unordered-containers-0.2.8.0-Bp9XgxjuHxcI4tFehVMDGC:Data.HashSet
                         vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector
                         vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector.Primitive
                         vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector.Storable
                         vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector.Unboxed
                         vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector.Unboxed.Base
import  -/  base-4.9.1.0:Control.Applicative 32430a90492e727f4bd80db71c28600c
import  -/  base-4.9.1.0:Control.Monad a6784c5dab0d75c63dabec5a37843f98
import  -/  base-4.9.1.0:Control.Monad.IO.Class 1a4384f66ee999caf5366398edb6ca7b
import  -/  base-4.9.1.0:Data.Foldable 3e0b6967a1da89945d0e2d47266337a2
import  -/  base-4.9.1.0:Data.List 07ae2acca6538aa0800bd0a993ac6ac1
import  -/  base-4.9.1.0:Data.Maybe d876c4ffe4b3c43755a781e8ad860d88
import  -/  base-4.9.1.0:Data.OldList 27987919d8da2f92e3f472ca81f730f8
import  -/  base-4.9.1.0:GHC.Base c4231c43c07e46080a26bf94094c7aa1
import  -/  base-4.9.1.0:GHC.Float 33e2b9ffe427edd6a5c2fd6a3b26703c
import  -/  base-4.9.1.0:GHC.IO.Unsafe 1c057c642b0e201f55a24585d3d94564
import  -/  base-4.9.1.0:GHC.List ab8c4e523e6c479c549d3bcd5fc4a439
import  -/  base-4.9.1.0:GHC.Num 00bfaa7b2f9d6084913c0697a8a49ec8
import  -/  base-4.9.1.0:GHC.Real 82e4e59051a13dba1da63e1e970a69e6
import  -/  base-4.9.1.0:GHC.Show a027f5ac24879eaba752f44aa90fe511
import  -/  base-4.9.1.0:Prelude 22dd289b8469a8fa8dc81cab7b237771
import  -/  base-4.9.1.0:System.IO c9de64c5f5407c4cf1c52500c4d15200
import  -/  base-4.9.1.0:System.IO.Unsafe 1e3c5b8dd8cf6850ae43cce967bb46cd
import  -/  containers-0.5.7.1@containers-0.5.7.1:Data.Sequence c9764451c7ea31b534e87988fc642948
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
import  -/  ghc-prim-0.5.0.0:GHC.Types 89f8de4f08018c9177c98d979eae0e45
import  -/  linear-1.20.7@linear-1.20.7-Hm7B9kQS5iJ4TZVBdSCC2p:Linear.V2 84a63a6b3f6e8f8486d121e776ecbcc6
import  -/  random-1.1@random-1.1-9tceXaeYIMZ4JrKq20Egog:System.Random cc3ef358c669b194cf9fe94db6f2430f
6756fcb55eb22a13fd0b75dbbc5b28a7
  $fEqDirection :: GHC.Classes.Eq Logic.Direction
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Logic.Direction
                  Logic.$fEqDirection_$c==
                  Logic.$fEqDirection_$c/= -}
6756fcb55eb22a13fd0b75dbbc5b28a7
  $fEqDirection_$c/= ::
    Logic.Direction -> Logic.Direction -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: Logic.Direction) (b :: Logic.Direction) ->
                 case a of wild {
                   Logic.Up
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True Logic.Up -> GHC.Types.False }
                   Logic.Down
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True Logic.Down -> GHC.Types.False }
                   Logic.Left
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True Logic.Left -> GHC.Types.False }
                   Logic.Right
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True Logic.Right -> GHC.Types.False } }) -}
6756fcb55eb22a13fd0b75dbbc5b28a7
  $fEqDirection_$c== ::
    Logic.Direction -> Logic.Direction -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (ds :: Logic.Direction) (ds1 :: Logic.Direction) ->
                 case ds of wild {
                   Logic.Up
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False Logic.Up -> GHC.Types.True }
                   Logic.Down
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False Logic.Down -> GHC.Types.True }
                   Logic.Left
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False Logic.Left -> GHC.Types.True }
                   Logic.Right
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False Logic.Right -> GHC.Types.True } }) -}
f53c7afdbd9180b7afc48f24388921a0
  $fEqGame :: GHC.Classes.Eq Logic.Game
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Logic.Game Logic.$fEqGame_$c== Logic.$fEqGame_$c/= -}
bfd637cdd5c6a5d1cf101b16087e9397
  $fEqGame1 :: GHC.Classes.Eq Logic.Tile
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True) Logic.$fEqGame_$s$fEqMaybe -}
f53c7afdbd9180b7afc48f24388921a0
  $fEqGame_$c/= :: Logic.Game -> Logic.Game -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SLL),1*U(1*U,1*U(U),1*U)><S(SLL),1*U(1*U,1*U(U),1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Logic.Game) (b :: Logic.Game) ->
                 case Logic.$fEqGame_$c== a b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
f53c7afdbd9180b7afc48f24388921a0
  $fEqGame_$c== :: Logic.Game -> Logic.Game -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SLL),1*U(1*U,1*U(U),1*U)><S(SLL),1*U(1*U,1*U(U),1*U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Logic.Game) (w4 :: Logic.Game) ->
                 case w of ww { Logic.Game ww1 ww2 ww3 ->
                 case w4 of ww4 { Logic.Game ww5 ww6 ww7 ->
                 Logic.$w$c== ww1 ww2 ww3 ww5 ww6 ww7 } }) -}
6cef739d76fabb977d4636ecdbe054ed
  $fEqGame_$s$fEqMaybe ::
    GHC.Classes.Eq (GHC.Base.Maybe GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (GHC.Base.Maybe GHC.Types.Int)
                  Logic.$fEqGame_$s$fEqMaybe_$c==
                  (GHC.Base.$fEqMaybe_$c/= @ GHC.Types.Int GHC.Classes.$fEqInt) -}
80eb7f8ab763d32beeaea01e9648c780
  $fEqGame_$s$fEqMaybe_$c== ::
    GHC.Base.Maybe GHC.Types.Int
    -> GHC.Base.Maybe GHC.Types.Int -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: GHC.Base.Maybe GHC.Types.Int)
                   (ds1 :: GHC.Base.Maybe GHC.Types.Int) ->
                 case ds of wild {
                   GHC.Base.Nothing
                   -> case ds1 of wild1 {
                        GHC.Base.Nothing -> GHC.Types.True
                        GHC.Base.Just ipv -> GHC.Types.False }
                   GHC.Base.Just a1
                   -> case ds1 of wild1 {
                        GHC.Base.Nothing -> GHC.Types.False
                        GHC.Base.Just b1 -> GHC.Classes.eqInt a1 b1 } }) -}
d337e540e0912987a271f8fbec23bd43
  $fEqGame_$s$fEq[] :: GHC.Classes.Eq [GHC.Base.Maybe GHC.Types.Int]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ [GHC.Base.Maybe GHC.Types.Int]
                  (GHC.Classes.$fEq[]_$c==
                     @ (GHC.Base.Maybe GHC.Types.Int)
                     Logic.$fEqGame1)
                  Logic.$fEqGame_$s$fEq[]_$c/= -}
05f1c7dbd20d3d943d89b2d2878aaa0f
  $fEqGame_$s$fEq[]_$c/= ::
    [GHC.Base.Maybe GHC.Types.Int]
    -> [GHC.Base.Maybe GHC.Types.Int] -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: [GHC.Base.Maybe GHC.Types.Int])
                   (y :: [GHC.Base.Maybe GHC.Types.Int]) ->
                 GHC.Classes.not
                   (GHC.Classes.$fEq[]_$c==
                      @ (GHC.Base.Maybe GHC.Types.Int)
                      Logic.$fEqGame1
                      x
                      y)) -}
6756fcb55eb22a13fd0b75dbbc5b28a7
  $fShowDirection :: GHC.Show.Show Logic.Direction
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Logic.Direction
                  Logic.$fShowDirection_$cshowsPrec
                  Logic.$fShowDirection_$cshow
                  Logic.$fShowDirection_$cshowList -}
9c9522b113029b77fca06228fe8e9728
  $fShowDirection1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Right"#) -}
39dc75142121fe6bf9b22eb0c4bd6b1e
  $fShowDirection2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Left"#) -}
3d27b9b0a72d82f2123904b33e78c1f6
  $fShowDirection3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Down"#) -}
e4d53faf9d6c39b50bea299353442e90
  $fShowDirection4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Up"#) -}
6756fcb55eb22a13fd0b75dbbc5b28a7
  $fShowDirection_$cshow :: Logic.Direction -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Logic.Direction) ->
                 Logic.$fShowDirection_$cshowsPrec
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
6756fcb55eb22a13fd0b75dbbc5b28a7
  $fShowDirection_$cshowList :: [Logic.Direction] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Logic.Direction
                   Logic.$w$cshowsPrec) -}
6756fcb55eb22a13fd0b75dbbc5b28a7
  $fShowDirection_$cshowsPrec ::
    GHC.Types.Int -> Logic.Direction -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, True)
                (\ (w :: GHC.Types.Int)
                   (w4 :: Logic.Direction)
                   (w5 :: GHC.Base.String) ->
                 Logic.$w$cshowsPrec w4 w5) -}
f53c7afdbd9180b7afc48f24388921a0
  $fShowGame :: GHC.Show.Show Logic.Game
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Logic.Game
                  Logic.$fShowGame_$cshowsPrec
                  Logic.$fShowGame_$cshow
                  Logic.$fShowGame_$cshowList -}
f53c7afdbd9180b7afc48f24388921a0
  $fShowGame1 :: Logic.Game -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (\ (w :: Logic.Game) (w4 :: GHC.Base.String) ->
                 case w of ww { Logic.Game ww1 ww2 ww3 ->
                 Logic.$w$cshowsPrec1 0# ww1 ww2 ww3 w4 }) -}
f53c7afdbd9180b7afc48f24388921a0
  $fShowGame_$cshow :: Logic.Game -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U,1*U(U),1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Logic.Game) ->
                 Logic.$fShowGame_$cshowsPrec
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
f53c7afdbd9180b7afc48f24388921a0
  $fShowGame_$cshowList :: [Logic.Game] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__ @ Logic.Game Logic.$fShowGame1) -}
f53c7afdbd9180b7afc48f24388921a0
  $fShowGame_$cshowsPrec ::
    GHC.Types.Int -> Logic.Game -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S(S),1*U(U)><S,1*U(1*U,1*U(U),1*U)><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w4 :: Logic.Game)
                   (w5 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w4 of ww2 { Logic.Game ww3 ww4 ww5 ->
                 Logic.$w$cshowsPrec1 ww1 ww3 ww4 ww5 w5 } }) -}
4fa20e1d7791eb45ef87dba3660bd24e
  $tc'Down :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   18232846762688043528##
                   18281936744938520478##
                   Logic.$trModule
                   Logic.$tc'Down1) -}
a7ca4eda2ef27a06eaff3b0e64f25a24
  $tc'Down1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Down"#) -}
1232d652e6d3f69ec5e34aae23302426
  $tc'Game :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5771678855487124109##
                   4703363261136619661##
                   Logic.$trModule
                   Logic.$tc'Game1) -}
9980e24c06212492fb472c6103ca8a9f
  $tc'Game1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Game"#) -}
1ce3bad50caebf236d12bd80d447d70f
  $tc'Left :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11302623052860438285##
                   16093500655171599237##
                   Logic.$trModule
                   Logic.$tc'Left1) -}
21a6b5bb3e970aabd6b2f4eac0fd731c
  $tc'Left1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Left"#) -}
9d6a743a4abd3676629909ece48a821d
  $tc'Right :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8130921362139646981##
                   4795298733057935930##
                   Logic.$trModule
                   Logic.$tc'Right1) -}
b46f599ade895c49152bcd0c81e106b0
  $tc'Right1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Right"#) -}
a2bad89070d178d23ae30c5ee0579e76
  $tc'Up :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15534049488020788398##
                   7026184030414289888##
                   Logic.$trModule
                   Logic.$tc'Up1) -}
959fcddabfa2f453d9b6eb472890e0c3
  $tc'Up1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Up"#) -}
84a2dd36aae504ccb02fde1d4ddd3608
  $tcDirection :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6514310321929724876##
                   12796856936338236437##
                   Logic.$trModule
                   Logic.$tcDirection1) -}
b287ed25e0aac8bafa6eb6b0db5d242b
  $tcDirection1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Direction"#) -}
e25f8f20fff885d0035fa4fb00694e94
  $tcGame :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13481359486862523604##
                   16014765630118349941##
                   Logic.$trModule
                   Logic.$tcGame1) -}
c1e6bd3e6c9de00b20f48e100d0fd706
  $tcGame1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Game"#) -}
ca6564237fa0081dd05fb2c7d5fe07ca
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Logic.$trModule2 Logic.$trModule1) -}
35bdf61d5231cfb6344058c93d09cda1
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Logic"#) -}
06e77711d77f96dcf7572f74409c4ee9
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "main"#) -}
11e8238f70af50b06592861caccc72d9
  $w$c== ::
    Logic.Grid
    -> GHC.Types.Int
    -> GHC.Types.Bool
    -> Logic.Grid
    -> GHC.Types.Int
    -> GHC.Types.Bool
    -> GHC.Types.Bool
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S,1*U><L,1*U(U)><L,1*U><S,1*U><L,1*U(U)><L,1*U>,
     Inline: [0],
     Unfolding: (\ (ww :: Logic.Grid)
                   (ww1 :: GHC.Types.Int)
                   (ww2 :: GHC.Types.Bool)
                   (ww3 :: Logic.Grid)
                   (ww4 :: GHC.Types.Int)
                   (ww5 :: GHC.Types.Bool) ->
                 case GHC.Classes.$fEq[]_$c==
                        @ [Logic.Tile]
                        Logic.$fEqGame_$s$fEq[]
                        ww
                        ww3 of wild {
                   GHC.Types.False -> GHC.Types.False
                   GHC.Types.True
                   -> case ww1 of wild1 { GHC.Types.I# x ->
                      case ww4 of wild2 { GHC.Types.I# y ->
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.==# x y) of wild3 {
                        GHC.Types.False -> GHC.Types.False
                        GHC.Types.True -> GHC.Classes.$fEqBool_$c== ww2 ww5 } } } }) -}
6756fcb55eb22a13fd0b75dbbc5b28a7
  $w$cshowsPrec ::
    Logic.Direction -> GHC.Base.String -> GHC.Base.String
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ (w :: Logic.Direction) (w4 :: GHC.Base.String) ->
                 case w of wild {
                   Logic.Up -> GHC.Base.++ @ GHC.Types.Char Logic.$fShowDirection4 w4
                   Logic.Down
                   -> GHC.Base.++ @ GHC.Types.Char Logic.$fShowDirection3 w4
                   Logic.Left
                   -> GHC.Base.++ @ GHC.Types.Char Logic.$fShowDirection2 w4
                   Logic.Right
                   -> GHC.Base.++ @ GHC.Types.Char Logic.$fShowDirection1 w4 }) -}
21f527c769792422661503d928f2e324
  $w$cshowsPrec1 ::
    GHC.Prim.Int#
    -> Logic.Grid
    -> GHC.Types.Int
    -> GHC.Types.Bool
    -> GHC.Base.String
    -> GHC.Base.String
  {- Arity: 5, Strictness: <S,U><L,1*U><L,1*U(U)><L,1*U><L,U>,
     Inline: [0] -}
b16f01439147c027a6c0c30bb76bbca8
  $winsertRandomTile ::
    Logic.Grid -> (# [Logic.Tile], [[Logic.Tile]] #)
  {- Arity: 1, Strictness: <S,1*U>, Inline: [0] -}
560c17eadf036c2bab872b3cae9860f4
  $wmonteCarloPlayBoard ::
    Logic.Grid
    -> GHC.Types.Int -> GHC.Types.Int -> GHC.Types.Int -> GHC.Prim.Int#
  {- Arity: 4, Strictness: <S,U><L,U(U)><L,U(U)><L,U(U)>,
     Inline: [0] -}
e0dc0fa867d3e64f6a30feeb7f240e58
  $wscoreGrid :: Logic.Grid -> GHC.Prim.Int# -> GHC.Prim.Int#
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,U>, Inline: [0] -}
4be22c53e08d1c9cb9ea1e3c8678227e
  $wxs :: GHC.Prim.Int# -> [GHC.Base.Maybe GHC.Types.Int]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>, Inline: [0] -}
6756fcb55eb22a13fd0b75dbbc5b28a7
  data Direction = Up | Down | Left | Right
f53c7afdbd9180b7afc48f24388921a0
  data Game
    = Game {_grid :: Logic.Grid,
            _score :: GHC.Types.Int,
            _done :: GHC.Types.Bool}
0042228100c73fede17ca0216502ec67
  type Grid = [[Logic.Tile]]
1a9892b7b8d21dece8bc89c897c777a2
  type Tile = GHC.Base.Maybe GHC.Types.Int
8f14b8e2a4258fd32a75d18c8b202502
  _done :: Logic.Game -> GHC.Types.Bool
  RecSel Left Logic.Game
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLS),1*U(A,A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Logic.Game) ->
                 case ds of wild { Logic.Game ds1 ds2 ds3 -> ds3 }) -}
4edf69933585003cc5785b8704154727
  _grid :: Logic.Game -> Logic.Grid
  RecSel Left Logic.Game
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SLL),1*U(1*U,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Logic.Game) ->
                 case ds of wild { Logic.Game ds1 ds2 ds3 -> ds1 }) -}
9d55f1f6aee1b148392705395dec5940
  _score :: Logic.Game -> GHC.Types.Int
  RecSel Left Logic.Game
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LSL),1*U(A,1*U(U),A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Logic.Game) ->
                 case ds of wild { Logic.Game ds1 ds2 ds3 -> ds2 }) -}
d964473dc4d99ec6d05d51a2bb1a826f
  checkFull :: Logic.Grid -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
022d7755d273b161bf4138a1129d576d
  initGame :: GHC.Types.IO Logic.Game
  {- Arity: 1, HasNoCafRefs, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Logic.initGame1 `cast` (Sym (GHC.Types.N:IO[0] <Logic.Game>_R)) -}
7b8a0f551ff79562110e8b28c8dbdee1
  initGame1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Logic.Game #)
  {- Arity: 1, HasNoCafRefs, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 (# s, Logic.initGame2 #)) -}
9ad00beaafee5fe001c9b6f9884af2a1
  initGame10 :: [Logic.Tile]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ Logic.Tile
                   (GHC.Base.Nothing @ GHC.Types.Int)
                   Logic.initGame11) -}
5e17ee3b56eef86523441db13cd9c410
  initGame11 :: [Logic.Tile]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ Logic.Tile
                   (GHC.Base.Nothing @ GHC.Types.Int)
                   (GHC.Types.[] @ Logic.Tile)) -}
38d4ca0500dee6635ad0cc6c86185775
  initGame12 :: [Logic.Tile]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ Logic.Tile
                   Logic.initGame14
                   Logic.initGame13) -}
ec8d863d0f99b1380f2424903fa7fb83
  initGame13 :: [Logic.Tile]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ Logic.Tile
                   Logic.initGame14
                   Logic.initGame10) -}
24604d71969cd0c98f288f801d479d8b
  initGame14 :: GHC.Base.Maybe GHC.Types.Int
  {- HasNoCafRefs,
     Unfolding: (GHC.Base.Just @ GHC.Types.Int Logic.initGame15) -}
d041aac980826da930776a4f36f9426f
  initGame15 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 2#) -}
bda744575e30ec69b44223d6a815bd9a
  initGame2 :: Logic.Game
  {- HasNoCafRefs,
     Unfolding: (Logic.Game
                   Logic.initGame4
                   Logic.initGame3
                   GHC.Types.False) -}
d0f005f76eaf44cf639e93995b04ad20
  initGame3 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 0#) -}
2a8eff4869dce9c903065f78fc91b325
  initGame4 :: [[Logic.Tile]]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ [Logic.Tile]
                   Logic.initGame12
                   Logic.initGame5) -}
f1ab9b927e5a24485b339c6fa4fca1d9
  initGame5 :: [[Logic.Tile]]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ [Logic.Tile]
                   Logic.initGame8
                   Logic.initGame6) -}
2fcf454c2810c2502d06ee4fbcc55956
  initGame6 :: [[Logic.Tile]]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ [Logic.Tile]
                   Logic.initGame8
                   Logic.initGame7) -}
e3bdedcc0ba6c8c290fd8b8f7405385d
  initGame7 :: [[Logic.Tile]]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ [Logic.Tile]
                   Logic.initGame8
                   (GHC.Types.[] @ [Logic.Tile])) -}
2259c1887d2b90daaac06c93160758e6
  initGame8 :: [Logic.Tile]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ Logic.Tile
                   (GHC.Base.Nothing @ GHC.Types.Int)
                   Logic.initGame9) -}
77795a7ad3578d6ba5860750b712f86d
  initGame9 :: [Logic.Tile]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ Logic.Tile
                   (GHC.Base.Nothing @ GHC.Types.Int)
                   Logic.initGame10) -}
6b6075d773b28b6f210964b096c886eb
  insertRandomTile :: Logic.Grid -> Logic.Grid
  {- Arity: 1, Strictness: <S,1*U>m2, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Logic.Grid) ->
                 case Logic.$winsertRandomTile w of ww { (#,#) ww1 ww2 ->
                 GHC.Types.: @ [Logic.Tile] ww1 ww2 }) -}
3734304773ada79feddf8dc8ba2281b4
  leftGrid :: Logic.Grid -> Logic.Grid
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (g :: Logic.Grid) ->
                 GHC.Base.build
                   @ [Logic.Tile]
                   (\ @ b1
                      (c :: [Logic.Tile] -> b1 -> b1)[OneShot]
                      (n :: b1)[OneShot] ->
                    GHC.Base.foldr
                      @ [Logic.Tile]
                      @ b1
                      (GHC.Base.mapFB @ [Logic.Tile] @ b1 @ [Logic.Tile] c Logic.leftRow)
                      n
                      g)) -}
559d15dcd0711a6b44e2daef95e5f2e0
  leftRow :: [Logic.Tile] -> [Logic.Tile]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: (\ (t :: [Logic.Tile]) ->
                 let {
                   x :: [Logic.Tile] = Logic.mergeRow t
                 } in
                 GHC.Base.++
                   @ (GHC.Base.Maybe GHC.Types.Int)
                   x
                   (case GHC.List.$wlenAcc
                           @ (GHC.Base.Maybe GHC.Types.Int)
                           x
                           0# of ww2 { DEFAULT ->
                    let {
                      y :: GHC.Prim.Int# = GHC.Prim.-# 4# ww2
                    } in
                    case GHC.Prim.tagToEnum#
                           @ GHC.Types.Bool
                           (GHC.Prim.<# 0# y) of wild {
                      GHC.Types.False -> GHC.Types.[] @ (GHC.Base.Maybe GHC.Types.Int)
                      GHC.Types.True -> Logic.$wxs y } })) -}
8af7b1bf1101b476bd439029259415f8
  mainLogic :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Logic.mainLogic1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
3e0185a0745d113bfd3648d016f4a458
  mainLogic1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (eta :: GHC.Prim.State#
                             GHC.Prim.RealWorld)[OneShot] ->
                 GHC.IO.Handle.Text.hPutStr2
                   GHC.IO.Handle.FD.stdout
                   Logic.mainLogic2
                   GHC.Types.True
                   eta) -}
b4cad6de648be3f94b94b95124a983f4
  mainLogic2 :: GHC.Base.String
  {- Unfolding: (case Logic.$wmonteCarloPlayBoard
                        Logic.initGame4
                        Logic.mainLogic5
                        Logic.mainLogic4
                        Logic.mainLogic3 of ww { DEFAULT ->
                 case GHC.Show.$wshowSignedInt
                        0#
                        ww
                        (GHC.Types.[] @ GHC.Types.Char) of ww4 { (#,#) ww5 ww6 ->
                 GHC.Types.: @ GHC.Types.Char ww5 ww6 } }) -}
1ccbee857906f77de889e234414a61ea
  mainLogic3 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 8#) -}
bf7bd184f815c4bbbaae1ded65cd72f7
  mainLogic4 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 1#) -}
dc5f4c08b0015d799ceff4ec4f903f95
  mainLogic5 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 5#) -}
3025f437873ef6b6ba40f3dcb97ccb10
  mergeRow :: [Logic.Tile] -> [Logic.Tile]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
71e75dfb3012d2685417b2b7b6d73c4f
  printTile :: Logic.Tile -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (t :: Logic.Tile) ->
                 case t of wild {
                   GHC.Base.Nothing -> Logic.printTile1
                   GHC.Base.Just n -> GHC.Show.$fShowInt_$cshow n }) -}
17e36ac47eecbe220e8ee61793bda53a
  printTile1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# " "#) -}
6fead0056c18d6c79551afd450d53405
  scoreGrid :: Logic.Grid -> GHC.Types.Int -> GHC.Types.Int
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U(U)>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Logic.Grid) (w4 :: GHC.Types.Int) ->
                 case w4 of ww { GHC.Types.I# ww1 ->
                 case Logic.$wscoreGrid w ww1 of ww2 { DEFAULT ->
                 GHC.Types.I# ww2 } }) -}
ba27a4dfa6e644b687c49a6bd2e0fe9b
  stuckCheck :: Logic.Grid -> GHC.Types.Bool
  {- Arity: 1, Strictness: <S,1*U> -}
instance GHC.Classes.Eq [Logic.Direction] = Logic.$fEqDirection
instance GHC.Classes.Eq [Logic.Game] = Logic.$fEqGame
instance GHC.Show.Show [Logic.Direction] = Logic.$fShowDirection
instance GHC.Show.Show [Logic.Game] = Logic.$fShowGame
"SPEC/Logic $fEqMaybe @ Int" [ALWAYS] forall ($dEq :: GHC.Classes.Eq
                                                        GHC.Types.Int)
  GHC.Base.$fEqMaybe @ GHC.Types.Int $dEq
  = Logic.$fEqGame_$s$fEqMaybe
"SPEC/Logic $fEqMaybe_$c== @ Int" [ALWAYS] forall ($dEq :: GHC.Classes.Eq
                                                             GHC.Types.Int)
  GHC.Base.$fEqMaybe_$c== @ GHC.Types.Int $dEq
  = Logic.$fEqGame_$s$fEqMaybe_$c==
"SPEC/Logic $fEq[] @ (Maybe Int)" [ALWAYS] forall ($dEq :: GHC.Classes.Eq
                                                             (GHC.Base.Maybe GHC.Types.Int))
  GHC.Classes.$fEq[] @ (GHC.Base.Maybe GHC.Types.Int) $dEq
  = Logic.$fEqGame_$s$fEq[]
"SPEC/Logic $fEq[]_$c/= @ (Maybe Int)" [ALWAYS] forall ($dEq :: GHC.Classes.Eq
                                                                  (GHC.Base.Maybe GHC.Types.Int))
  GHC.Classes.$fEq[]_$c/= @ (GHC.Base.Maybe GHC.Types.Int) $dEq
  = Logic.$fEqGame_$s$fEq[]_$c/=
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

